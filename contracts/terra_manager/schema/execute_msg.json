{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "description": "Terra manager is the entry point for a user to initiate an investment transaction. It is responsible for locating the underlying contract strategy manager address by utilizing Aperture registry, and delegate specific business logic to the strategy manager.",
  "oneOf": [
    {
      "description": "Add strategy with the specified manager address and metadata. A new, unique identifier is assigned to this new strategy.\n\nOnly contract owner may execute `AddStrategy`.",
      "type": "object",
      "required": [
        "add_strategy"
      ],
      "properties": {
        "add_strategy": {
          "type": "object",
          "required": [
            "manager_addr",
            "name",
            "version"
          ],
          "properties": {
            "manager_addr": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "version": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Remove the strategy associated with the specified identifier.\n\nOnly contract owner may execute `RemoveStrategy`.",
      "type": "object",
      "required": [
        "remove_strategy"
      ],
      "properties": {
        "remove_strategy": {
          "type": "object",
          "required": [
            "strategy_id"
          ],
          "properties": {
            "strategy_id": {
              "$ref": "#/definitions/Uint64"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Perform an action on an existing positions held by a Terra address. Only the position holder is able to call this.",
      "type": "object",
      "required": [
        "execute_strategy"
      ],
      "properties": {
        "execute_strategy": {
          "type": "object",
          "required": [
            "action",
            "assets",
            "position"
          ],
          "properties": {
            "action": {
              "$ref": "#/definitions/Action"
            },
            "assets": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Asset"
              }
            },
            "position": {
              "$ref": "#/definitions/Position"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Create a new position with the specified strategy.",
      "type": "object",
      "required": [
        "create_position"
      ],
      "properties": {
        "create_position": {
          "type": "object",
          "required": [
            "assets",
            "strategy"
          ],
          "properties": {
            "assets": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Asset"
              }
            },
            "data": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Binary"
                },
                {
                  "type": "null"
                }
              ]
            },
            "strategy": {
              "$ref": "#/definitions/Strategy"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "initiate_outgoing_token_transfer"
      ],
      "properties": {
        "initiate_outgoing_token_transfer": {
          "type": "object",
          "required": [
            "assets",
            "recipient"
          ],
          "properties": {
            "assets": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Asset"
              }
            },
            "recipient": {
              "$ref": "#/definitions/Recipient"
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Action": {
      "description": "Action enum that represents what users can do to each strategy. For instance, users can open a position, which is represented by the OpenPosition variant.",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "open_position"
          ],
          "properties": {
            "open_position": {
              "type": "object",
              "properties": {
                "data": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Binary"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "close_position"
          ],
          "properties": {
            "close_position": {
              "type": "object",
              "required": [
                "recipient"
              ],
              "properties": {
                "recipient": {
                  "$ref": "#/definitions/Recipient"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "increase_position"
          ],
          "properties": {
            "increase_position": {
              "type": "object",
              "properties": {
                "data": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Binary"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "decrease_position"
          ],
          "properties": {
            "decrease_position": {
              "type": "object",
              "required": [
                "proportion",
                "recipient"
              ],
              "properties": {
                "proportion": {
                  "$ref": "#/definitions/Decimal"
                },
                "recipient": {
                  "$ref": "#/definitions/Recipient"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Asset": {
      "type": "object",
      "required": [
        "amount",
        "info"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "info": {
          "$ref": "#/definitions/AssetInfo"
        }
      }
    },
    "AssetInfo": {
      "description": "AssetInfo contract_addr is usually passed from the cw20 hook so we can trust the contract_addr is properly validated.",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "object",
              "required": [
                "contract_addr"
              ],
              "properties": {
                "contract_addr": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "native_token"
          ],
          "properties": {
            "native_token": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Position": {
      "description": "The pair (chain id, position id) can uniquely identify a position across all chains.",
      "type": "object",
      "required": [
        "chain_id",
        "position_id"
      ],
      "properties": {
        "chain_id": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "position_id": {
          "$ref": "#/definitions/Uint128"
        }
      }
    },
    "Recipient": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "terra_chain"
          ],
          "properties": {
            "terra_chain": {
              "type": "object",
              "required": [
                "recipient"
              ],
              "properties": {
                "recipient": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "external_chain"
          ],
          "properties": {
            "external_chain": {
              "type": "object",
              "required": [
                "recipient",
                "recipient_chain"
              ],
              "properties": {
                "recipient": {
                  "$ref": "#/definitions/Binary"
                },
                "recipient_chain": {
                  "type": "integer",
                  "format": "uint16",
                  "minimum": 0.0
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Strategy": {
      "description": "The strategy id and chain id can uniquely identify what strategy it is and on which chain is it located.",
      "type": "object",
      "required": [
        "chain_id",
        "strategy_id"
      ],
      "properties": {
        "chain_id": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "strategy_id": {
          "$ref": "#/definitions/Uint64"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
