{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "QueryMsg",
  "description": "Get basic information from this position manager.",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "get_position_contract_addr"
      ],
      "properties": {
        "get_position_contract_addr": {
          "type": "object",
          "required": [
            "position"
          ],
          "properties": {
            "position": {
              "$ref": "#/definitions/Position"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "get_context"
      ],
      "properties": {
        "get_context": {
          "type": "object"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Position": {
      "description": "The pair (chain id, position id) can uniquely identify a position across all chains.",
      "type": "object",
      "required": [
        "chain_id",
        "position_id"
      ],
      "properties": {
        "chain_id": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "position_id": {
          "$ref": "#/definitions/Uint128"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
