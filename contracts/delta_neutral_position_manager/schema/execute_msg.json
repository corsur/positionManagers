{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "description": "List of actions available on this particular strategy. The specific enums are inherited/copied from the Aperture common package.",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "perform_action"
      ],
      "properties": {
        "perform_action": {
          "type": "object",
          "required": [
            "assets",
            "position"
          ],
          "properties": {
            "action_data_binary": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Binary"
                },
                {
                  "type": "null"
                }
              ]
            },
            "assets": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Asset"
              }
            },
            "position": {
              "$ref": "#/definitions/Position"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "internal"
      ],
      "properties": {
        "internal": {
          "$ref": "#/definitions/InternalExecuteMsg"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Asset": {
      "type": "object",
      "required": [
        "amount",
        "info"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "info": {
          "$ref": "#/definitions/AssetInfo"
        }
      }
    },
    "AssetInfo": {
      "description": "AssetInfo contract_addr is usually passed from the cw20 hook so we can trust the contract_addr is properly validated.",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "object",
              "required": [
                "contract_addr"
              ],
              "properties": {
                "contract_addr": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "native_token"
          ],
          "properties": {
            "native_token": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "DeltaNeutralParams": {
      "type": "object",
      "required": [
        "mirror_asset_cw20_addr",
        "target_max_collateral_ratio",
        "target_min_collateral_ratio"
      ],
      "properties": {
        "mirror_asset_cw20_addr": {
          "type": "string"
        },
        "target_max_collateral_ratio": {
          "$ref": "#/definitions/Decimal"
        },
        "target_min_collateral_ratio": {
          "$ref": "#/definitions/Decimal"
        }
      }
    },
    "InternalExecuteMsg": {
      "description": "Internal execute messages that will only be processed if sent from the contract itself.",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "send_open_position_to_position_contract"
          ],
          "properties": {
            "send_open_position_to_position_contract": {
              "type": "object",
              "required": [
                "params",
                "position",
                "uusd_asset"
              ],
              "properties": {
                "params": {
                  "$ref": "#/definitions/DeltaNeutralParams"
                },
                "position": {
                  "$ref": "#/definitions/Position"
                },
                "uusd_asset": {
                  "$ref": "#/definitions/Asset"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Position": {
      "type": "object",
      "required": [
        "chain_id",
        "position_id"
      ],
      "properties": {
        "chain_id": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "position_id": {
          "$ref": "#/definitions/Uint128"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
