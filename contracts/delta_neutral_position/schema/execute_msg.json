{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "close_position"
      ],
      "properties": {
        "close_position": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "open_position"
      ],
      "properties": {
        "open_position": {
          "type": "object",
          "required": [
            "mirror_asset_cw20_addr",
            "target_max_collateral_ratio",
            "target_min_collateral_ratio"
          ],
          "properties": {
            "mirror_asset_cw20_addr": {
              "type": "string"
            },
            "target_max_collateral_ratio": {
              "$ref": "#/definitions/Decimal"
            },
            "target_min_collateral_ratio": {
              "$ref": "#/definitions/Decimal"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "controller"
      ],
      "properties": {
        "controller": {
          "$ref": "#/definitions/ControllerExecuteMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "internal"
      ],
      "properties": {
        "internal": {
          "$ref": "#/definitions/InternalExecuteMsg"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "ControllerExecuteMsg": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "claim_reward_and_add_to_anchor_collateral"
          ],
          "properties": {
            "claim_reward_and_add_to_anchor_collateral": {
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "claim_short_sale_proceeds_and_stake"
          ],
          "properties": {
            "claim_short_sale_proceeds_and_stake": {
              "type": "object",
              "required": [
                "mirror_asset_amount",
                "stake_via_spectrum"
              ],
              "properties": {
                "mirror_asset_amount": {
                  "$ref": "#/definitions/Uint128"
                },
                "stake_via_spectrum": {
                  "type": "boolean"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "InternalExecuteMsg": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "deposit_uusd_balance_to_anchor"
          ],
          "properties": {
            "deposit_uusd_balance_to_anchor": {
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "add_anchor_ust_balance_to_collateral"
          ],
          "properties": {
            "add_anchor_ust_balance_to_collateral": {
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "open_cdp_with_anchor_ust_balance_as_collateral"
          ],
          "properties": {
            "open_cdp_with_anchor_ust_balance_as_collateral": {
              "type": "object",
              "required": [
                "collateral_ratio",
                "mirror_asset_cw20_addr"
              ],
              "properties": {
                "collateral_ratio": {
                  "$ref": "#/definitions/Decimal"
                },
                "mirror_asset_cw20_addr": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "swap_uusd_for_minted_mirror_asset"
          ],
          "properties": {
            "swap_uusd_for_minted_mirror_asset": {
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "stake_terraswap_lp_tokens"
          ],
          "properties": {
            "stake_terraswap_lp_tokens": {
              "type": "object",
              "required": [
                "lp_token_cw20_addr",
                "stake_via_spectrum"
              ],
              "properties": {
                "lp_token_cw20_addr": {
                  "type": "string"
                },
                "stake_via_spectrum": {
                  "type": "boolean"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
